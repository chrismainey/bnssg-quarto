---
title: "pop your title here"
format: 
  html:
    #page-layout: full
    embed-resources: true
    toc: true
    toc-location: left
    toc_float: true
    theme: cosmo
    mainfont: Arial
    css: styles.css
    margin-width: 50px
    page-width: 15
    body-width: 2000px
    toc-header-name: "Contents"   
    grid: 
      body-width: 1000px
      sidebar-width: 350px
      margin-width: 350px
execute:
  echo: false
  warning: false
editor: source
---

```{r}
#| label: libraries

# call your libraries here
library(tidyverse) #data manipulation
library(janitor) #clean_names
library(sf) #import geography files (shapes)
library(leaflet) #for mapping
library(RColorBrewer) #for colour palette
library(gt) # for printing tables
```


```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(
                 external = TRUE,
                 echo = FALSE,
                 warning = FALSE,
                 message = FALSE
                )
```


## Introduction

Some sort of introduction

## Context

Here we have some context

## Data

Here is a a table of data that can be expanded upon clicking

:::{.callout-note collapse=true  icon=true}
## Call out, collapsable table (click to expand)

my table
```{r}
#| label: table-output
#| echo: false
dat <- head(mtcars, 10)
tab <- dat |> 
  gt()
tab
```
:::


## Viualisations - interactive maps

This section contains examples for creating maps using the leaflet package in R. What's covered:

* How to add colour-coded polygons
* Have multiple polygon layers on the same map
* Add basic, cluster, or icon markers

See official [Leaflet for R](https://rstudio.github.io/leaflet/) documentation for more info.

A leaflet map can be saved as part of an interactive R output (ex: Markdown, Flexdash, Quarto, Shiny), as is the case in this document, or on its own as an HTML widget using [saveWidget()](https://www.geeksforgeeks.org/how-to-save-a-leaflet-map-as-a-html-widget-in-r/).

``` {r}
#| label: data-for-maps

## Read in shapefiles

# LSOA
# shape file from the ONS Geography Portal
lsoa_shp <- read_sf("https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/LSOA_2011_Boundaries_Super_Generalised_Clipped_BSC_EW_V4/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson") |> 
  filter(
    grepl("Bristol", LSOA11NM)
  ) |> 
  mutate(
    area_binned = ntile(Shape__Area, n = 6)
  )

# # If using Shapefiles saved in BNSSG folders, use the following:
# shp <- read_sf(dsn = "GIS folder path", 
#                layer = "shapefiles name") %>% 
#   
#   # transform to st which uses lat/long data
#   st_transform("+proj=longlat +datum=WGS84")

  
## Read in data 

# Heat map data (dummy data table)
data <- lsoa_shp |> 
  filter(str_detect(LSOA11NM, "Bristol")) |> 
  select(LSOA11CD) |> 
  mutate(
    value1 = sample(1:100, 263, replace = T),
    value2 = sample(1:100, 263, replace = T)
  ) |> 
  as_tibble()


## Markers - these must contain latitude and longitude variables
markers <- readRDS(here::here("sample_postcodes.rds"))

```

### Heat map with basic markers

Lots of provider tiles (ie. background map) to choose from, I like CartoDB ones but you can find all the options here: [https://leaflet-extras.github.io/leaflet-providers/preview/](https://leaflet-extras.github.io/leaflet-providers/preview/)

```{r}
#| fig-height: 6
#| label: heat-map-basic-marker

# Join the shapefiles and data - use inner join to also filter shapefiles data
lsoa_shp_data <- inner_join(lsoa_shp, data)

# create colour palette for heat map for value 1
cols_val1 <- colorNumeric(palette = "BuPu",
                          domain = lsoa_shp_data$value1)

markers_subset <- sample_n(
  filter(markers, itl == "E06000023"), 
  5)

# Create map
leaflet() %>%
  
  # can use default leaflet tiles or specify provider
  addProviderTiles(provider = providers$CartoDB.Voyager) %>%
  
  # add LSOA shapes with colour coding
  addPolygons(data = lsoa_shp_data,
              fillColor = ~cols_val1(value1),
              color = "black",
              stroke = T,
              weight = 1,
              fillOpacity = 0.6,
              
              #option to highlight area when hovering over it
              highlightOptions = highlightOptions(color = "white",
                                                  weight = 2,
                                                  bringToFront = T),
              
              #pop-up text
              popup = paste0("LSOA: ", lsoa_shp_data$lsoa11cd,
                             "<br> Value: ", lsoa_shp_data$value1)
              
  ) %>%
  
  # add legend for heat map
  addLegend("bottomleft", 
            pal = cols_val1, 
            values = lsoa_shp_data$value1,
            title = "Value 1",
            opacity = 0.6) %>% 
  
  # markers
  addMarkers(data = markers_subset,
             lat = ~lat, 
             lng = ~long, 
             popup = ~paste0("This is a marker for ", markers_subset$pcd, 
                             "<br> It is in LSOA ", markers_subset$lsoa11),
             label = ~pcd)

```


### Heat map with multiple layers

```{r}
#| fig-height: 6
#| label: heat-map-multiple-layers

# Create a new palette for value 2
# If your values have the same scale, you could use the same palette/legend
cols_val2 <- colorNumeric(palette = "YlOrRd",
                          domain = lsoa_shp_data$value2)

leaflet() %>%
  addProviderTiles(provider = providers$CartoDB.Voyager) %>%
  
  ## Layer 1 polygons
  addPolygons(data = lsoa_shp_data,
              fillColor = ~cols_val1(value1),
              color = "black",
              stroke = T,
              weight = 1,
              fillOpacity = 0.6,
              
              highlightOptions = highlightOptions(color = "white",
                                                  weight = 2,
                                                  bringToFront = T),
              
              popup = paste0("LSOA: ", lsoa_shp_data$lsoa11cd,
                             "<br> Value 1: ", lsoa_shp_data$value1),
              
              group = "Value 1" #for layers
              
  ) %>%
  
  ## Layer 2 polygons
  addPolygons(data = lsoa_shp_data,
              fillColor = ~cols_val2(value2),
              color = "black",
              stroke = T,
              weight = 1,
              fillOpacity = 0.6,
              
              highlightOptions = highlightOptions(color = "white",
                                                  weight = 2,
                                                  bringToFront = T),
              
              popup = paste0("LSOA: ", lsoa_shp_data$lsoa11cd,
                             "<br> Value 2: ", lsoa_shp_data$value2),
              
              group = "Value 2" #for layers
              
  ) %>%
  
  # Add legends for each layer
  addLegend("bottomleft", 
            pal = cols_val2, 
            values = lsoa_shp_data$value2,
            title = "Value 2",
            opacity = 0.6) %>% 
  
  addLegend("bottomleft", 
            pal = cols_val1, 
            values = lsoa_shp_data$value1,
            title = "Value 1",
            opacity = 0.6) %>% 
  
  addLayersControl(baseGroups = c("Value 1", "Value 2"),
                   options = layersControlOptions(collapsed = FALSE))


```


### Map of LSOAs with cluster markers

``` {r}
#| fig-height: 6
#| label: cluster-markers

# Assign colours to localities
cols_loc <- colorFactor(c("#00bf9c", "#00675e", "#49cc3b", "#096830", "#1191D1", "#004890"),
                        domain = lsoa_shp$area_binned)

leaflet() %>% 
  addProviderTiles(provider = providers$CartoDB.Voyager) %>% 
  
  addPolygons(data = lsoa_shp,
              fillColor = ~cols_loc(area_binned),
              color =  "white",
              stroke = T,
              weight = 2,
              fillOpacity = 0.7) %>%

  addLegend("bottomleft", 
            opacity = 0.8,
            pal = cols_loc, 
            values = lsoa_shp$area_binned,
            title = "BNSSG Localities") %>% 
    
  addMarkers(data = markers,
             lat = ~lat, 
             lng = ~long, 
             popup = ~paste0("This is a marker for ", markers$pcd),
             label = ~pcd, 
             clusterOptions = markerClusterOptions())

```


### Map of LSOAs with icon markers

You can add icons to markers using addAwesomeMarkers. The map below uses library "fa", ie. [Font Awesome icons](https://fontawesome.com/v4/icons/), but there are other sources available. For Font Awesome, note that the ones compatible with leaflet are version 4. 

``` {r}
#| fig-height: 6
#| label: icon-markers

gps <- sample_n(markers, 10)
hosps <- sample_n(markers, 3)
carehomes <- sample_n(markers, 10)

leaflet() %>% 
  addProviderTiles(provider = providers$CartoDB.Voyager) %>% 
  
  addPolygons(data = lsoa_shp,
              fillColor = ~cols_loc(area_binned),
              color =  "white",
              stroke = T,
              weight = 2,
              fillOpacity = 0.7) %>%

  addLegend("bottomleft", 
            opacity = 0.8,
            pal = cols_loc, 
            values = lsoa_shp$area_binned,
            title = "BNSSG Localities") %>% 

  addAwesomeMarkers(data = gps, lat = ~lat,  lng = ~long, label = "GP",
                    icon = awesomeIcons(icon = "user-md",
                                        library = "fa",
                                        markerColor = "purple"),
                    group = "GP") %>% 

  addAwesomeMarkers(data = hosps, lat = ~lat,  lng = ~long, label = "Hospital",
                    icon = awesomeIcons(icon = "h-square",
                                        library = "fa",
                                        markerColor = "red"),
                    group = "Hospital") %>% 
  
  addAwesomeMarkers(data = carehomes, lat = ~lat,  lng = ~long, label = "Care Home",
                    icon = awesomeIcons(icon = "home",
                                        library = "fa",
                                        markerColor = "white"),
                    group = "Care Home") %>% 
  
    addLayersControl(overlayGroups = c("GP", "Hospital", "Care Home"),
                    options = layersControlOptions(collapsed = FALSE))
  
  

```

## Viualisations - BNSSG theme

Note, the functions below are taken from a BNSSG GitHub repo that is ni the process of being upgraded to a package. Once the package has been developed, the following functions will no longer be necessary.

### BNSSG theme functions

```{r}
#| label: branding-functions

theme_bnssg <- function(base_size = 12, base_family = "sans",base_colour = "black"){theme_bw() %+replace% theme(
  axis.title.x = element_text(size = 16, color = '#1c1f63', face = 'bold', family = "sans", margin = margin(t = 0, r = 20, b = 0, l = 0)), #x Axis Titles
  axis.title.y = element_text(size = 16, color = '#1c1f63', angle = 90, face = 'bold', family = "sans", margin = margin(t = 0, r = 20, b = 0, l = 0)), #y Axis Titles
  axis.text = element_text(size = 12,  family = "sans", color = 'black'), #Axis text
  panel.border = element_blank(), #remove plot border
  panel.grid.major.x = element_blank(), #no major vertical lines
  panel.grid.major.y = element_line(linetype = 'dotted', size = 1), #dotted major horizontal lines
  panel.grid.minor = element_blank(), #no minor lines
  legend.justification='left', #legend left
  legend.direction='horizontal', #legend to be horizontal
  legend.title = element_blank(), #No legend title
  legend.text = element_text(size = 12, family = "sans",),
  legend.key.size = unit(0.3, "cm"),
  plot.title = element_text(size = 16, color = '#1c1f63', face="bold", margin = margin(b = 10, t=10), hjust=0),
  plot.subtitle = element_text(size = 10, margin = margin(b = 10), hjust=0, color = "grey20"),
  # Customize facet title appearance
  strip.background = element_blank(),  # Set background to white
  strip.text = element_text(face = "bold", family = "sans", size = 12),  # Set font to Arial 12 for facet titles
  plot.title.position = "plot", #align to left of plot not y-axis
  legend.position = "top", #legend position to top
  legend.location = "plot") 
}

bnssgtheme <- theme_bnssg


## Colour Functions ####

bnssg_colours <- c(
  `white`           = "#FFFFFF",
  `midnight_blue`   = "#1C1F62",
  `dark_violet`     = "#D091FD",
  `royal_blue`      = "#045EDA",
  `grass_green`     = "#008247",
  `brilliant_purple`= "#8F00B6",
  `vivid_blue`      = "#049FC1",
  `lime_green`      = "#9EF101",
  `teal`            = "#73D4D3")

bnssg_cols <- function(...) {
  cols <- c(...)
  
  if (is.null(cols))
    return (bnssg_colours)
  
  bnssg_colours[cols]
}


##Set colour 'names'scheme' names:
bnssg_palettes <- list(
  "main"  = bnssg_cols("midnight_blue", "dark_violet", "royal_blue", "grass_green", "brilliant_purple",
                       "vivid_blue", "lime_green", "teal"),
  "blpkgrn" = c("#1C1F62", "#045EDA", "#0DCFFA", "#D091FD", "#8F00B6", "#008080", "#35FFA4", "#9EF101"),
  "blgrn" = c("#1C1F62", "#045EDA", "#0DCFFA", "#E5FFB5", "#005730"  ),
  "blpk" = c("#1C1F62","#045EDA","#0DCFFA","#D091FD", "#8F00B6"),
  "pkgrn" = c("#D091FD","#8F00B6", "#008080", "#9EF101","#005730"),
  "blue_3" = c("#1C1F62","#045EDA", "#0DCFFA"),
  "blue_5" = c("#1C1F62","#045EDA", "#0DCFFA", "#888BDD","#0346A3"),
  "pink_5" = c("#420272", "#8F00B6", "#F3C4FF", "#E06CFF", "#CD11FF"),
  "pink_3"= c("#420272", "#8F00B6", "#F3C4FF"),
  "green_5" = c("#003B3D", "#008247","#E5FFB5","#00AD5F","#54B7B7"),
  "green_3" = c("#003B3D", "#008247","#E5FFB5")
  )



##Function so that the colours can be found from the scheme name
bnssg_pal <- function(palette, reverse = FALSE, ...) {
  pal <- bnssg_palettes[[palette]]
  
  if (reverse) pal <- rev(pal)
  
  colorRampPalette(pal, ...)
}


scale_color_bnssg <- function(palette = "main", discrete = FALSE, reverse = FALSE, ...) {
  pal <- bnssg_pal(palette = palette, reverse = reverse)
  
  if (discrete) {
    discrete_scale("color", paste0("bnssg_", palette), palette = pal, ...)
  } else {
    scale_colour_gradientn(colors = pal(256), ...)
  }
}

scale_colour_bnssg <- scale_color_bnssg

scale_fill_bnssg <- function(palette = "main", discrete = TRUE, reverse = FALSE, ...) {
  pal <- bnssg_pal(palette = palette, reverse = reverse)
  
  if (discrete) {
    discrete_scale("fill", paste0("bnssg_", palette), palette = pal, ...)
  } else {
    scale_fill_gradientn(colours = pal(256), ...)
  }
}
```


Here is a line chart using the BNSSG themes functions. Note, this example also contains an example of alternative text:

```{r}
#| label: bnssg-chart
#| fig-alt: |
#|   This is a scatterplot of the mtcars dataset with the BNSSG theme applied to 
#|   it. This example shows how to split alternative text over a few lines in 
#|   case the text is too long.

ggplot(
  mtcars,
  aes(
    x = qsec,
    y = wt
  )
) +
  geom_point(
    aes(
      colour = factor(cyl)
    )
  ) +
  scale_colour_bnssg(discrete=TRUE) +
  bnssgtheme() +
  labs(
    title = "Chart of qsec against wt for the mtcars dataset",
    subtitle = "The points are filled based on cyl"
  )

```


## Visualisations - plots in tabsets


```{r}
#| label: cars-plots
theme_set(theme_bw())

multi_plots <- mtcars %>%
  pivot_longer(cols = where(is.numeric)) %>% 
  group_nest(name, keep = T) %>% 
  deframe() %>% 
  map(., function(x){ggplot(x,aes(x=value))+geom_histogram() + 
      labs(title = paste0("Histogram for ",unique(x$name)))}) 

```


::: {.panel-tabset}
```{r pod-tabsets}
#| results: asis
#| fig-width: 14
#| fig-height: 6

iwalk(multi_plots, ~ {
  cat('## ', .y, '\n\n')
  
  print(.x)
  
  cat('\n\n')
  
})

```

:::

## Conclusions

There are some opportunities in this area.

## Recommendations

We recommend to...
